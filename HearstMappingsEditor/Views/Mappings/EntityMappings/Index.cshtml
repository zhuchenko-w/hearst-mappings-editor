@using HearstMappingsEditor.Models
@using HearstMappingsEditor.Common
@using HearstMappingsEditor.Data.Models

@model MappingFilterableViewModel<EntityMappingViewModel, EntityMappingFilter, EntityMappingRestriction, EntityMappingRefs>

@{
    ViewBag.Title = "Entity Mapping";
    var controller = "EntityMappings";
}

@section filters {
    @{Html.RenderPartial("_Filters", Model.Refs);}
}

@section columnTitles {
    <th style="display:none;">RowId</th>
    <th>PerimeterCode</th>
    <th>EntityCode</th>
}

@section items {
    @{Html.RenderPartial("_List", new Tuple<IList<EntityMappingViewModel>, IList<EntityMappingRestriction>>(Model.MappingData.Mappings, Model.Restrictions));}
}

@section newItemFields {
    @{Html.RenderPartial("_NewItemFields", Model.Refs);}
}

@section refs {
    <select class="filterable-select perimeter">
        @foreach (var item in Model.Refs.Perimeters)
        {
            <option value="@item.PerimeterID">@item.PerimeterCode</option>
        }
    </select>
    <select class="filterable-select entity">
        @foreach (var item in Model.Refs.DimEntities)
        {
            <option value="@item.EntityID">@item.EntityCode</option>
        }
    </select>
}

@section scripts {
    @Scripts.Render("~/bundles/mapping")
    <script>
        var saveUrl = '@(Url.Action("Save", controller))';
        var getListUrl = '@(Url.Action("GetList", controller))';
        var getListItemUrl = '@(Url.Action("GetListItem", controller))';
        var exportUrl = '@(Url.Action("Export", controller))';
        var excelFileName = '@(Constants.ExportToExcelEntityMappingFileName)';
        var initialSyncState = @((Model.MappingData.IsSynced).ToString().ToLower());
        var initialLoadPageSize = @Model.InitialLoadPageSize;
        var pageSize = @Model.PageSize;
        syncAvailable(!@(Model.MappingData.IsSynced.ToString().ToLower()));
        @(string.IsNullOrEmpty(Model.Error)?"": $"showNotification('Error', '{Model.Error}');")
    </script>
    @Scripts.Render("~/bundles/mapping/entities")
}